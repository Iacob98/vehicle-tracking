import streamlit as st
from auth import require_auth, is_admin, is_manager
from models import TeamMember, TeamMemberDocument, Team, Organization, WorkerCategory
from database import Session
from utils import upload_multiple_files, display_file
from datetime import date
import pandas as pd

# Require authentication
user = require_auth()
if not user:
    st.stop()

st.title("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—Ä–∏–≥–∞–¥—ã / Teammitglieder")

# Only managers and admins can manage team members
if not (is_manager(user) or is_admin(user)):
    st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –±—Ä–∏–≥–∞–¥—ã.")
    st.error("‚ùå Zugriff verweigert. Nur Admins und Manager k√∂nnen Teammitglieder verwalten.")
    st.stop()

# Create tabs
tabs = st.tabs(["üìã –°–ø–∏—Å–æ–∫ / Liste", "‚ûï –î–æ–±–∞–≤–∏—Ç—å / Hinzuf√ºgen", "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã / Dokumente"])

with Session() as session:
    # Get current organization teams
    teams = session.query(Team).filter_by(organization_id=user.organization_id).all()
    team_options = {f"{team.name}": team for team in teams}

with tabs[0]:  # List
    st.subheader("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–∏–≥–∞–¥—ã / Liste der Teammitglieder")
    
    with Session() as session:
        # Filter by team if selected
        selected_team_name = st.selectbox(
            "üîç –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–∏–≥–∞–¥–µ / Filter nach Team:",
            ["–í—Å–µ / Alle"] + list(team_options.keys())
        )
        
        # Get team members
        query = session.query(TeamMember).filter_by(organization_id=user.organization_id)
        if selected_team_name != "–í—Å–µ / Alle":
            selected_team = team_options[selected_team_name]
            query = query.filter_by(team_id=selected_team.id)
            
        team_members = query.all()
        
        if team_members:
            # Create DataFrame for display
            data = []
            for member in team_members:
                team_name = member.team.name if member.team else "–ë–µ–∑ –±—Ä–∏–≥–∞–¥—ã"
                category_display = {
                    WorkerCategory.driver: "–í–æ–¥–∏—Ç–µ–ª—å / Fahrer",
                    WorkerCategory.mechanic: "–ú–µ—Ö–∞–Ω–∏–∫ / Mechaniker", 
                    WorkerCategory.specialist: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç / Spezialist",
                    WorkerCategory.general: "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã / Allgemein"
                }.get(member.category, "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã")
                
                docs_count = len(member.documents) if member.documents else 0
                
                data.append({
                    "ID": str(member.id)[:8],
                    "–ò–º—è / Name": f"{member.first_name} {member.last_name}",
                    "–¢–µ–ª–µ—Ñ–æ–Ω / Telefon": member.phone or "-",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è / Kategorie": category_display,
                    "–ë—Ä–∏–≥–∞–¥–∞ / Team": team_name,
                    "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ / Dokumente": docs_count,
                    "–°–æ–∑–¥–∞–Ω / Erstellt": member.created_at.strftime("%d.%m.%Y")
                })
            
            df = pd.DataFrame(data)
            st.dataframe(df, use_container_width=True, hide_index=True)
            
            # Edit/Delete actions
            st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è / Aktionen")
            
            # Select member to edit
            member_options = {f"{m.first_name} {m.last_name} ({str(m.id)[:8]})": m for m in team_members}
            selected_member_display = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ / W√§hle Teammitglied:",
                list(member_options.keys())
            )
            
            if selected_member_display:
                selected_member = member_options[selected_member_display]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / Bearbeiten"):
                        st.session_state.editing_member = selected_member.id
                        st.rerun()
                
                with col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å / L√∂schen", type="secondary"):
                        if st.session_state.get('confirm_delete') != selected_member.id:
                            st.session_state.confirm_delete = selected_member.id
                            st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / Nochmals klicken zur Best√§tigung")
                        else:
                            # Delete member and documents
                            with Session() as session:
                                member_to_delete = session.get(TeamMember, selected_member.id)
                                if member_to_delete:
                                    # Delete documents first
                                    for doc in member_to_delete.documents:
                                        session.delete(doc)
                                    session.delete(member_to_delete)
                                    session.commit()
                                    st.success("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω / Teammitglied gel√∂scht")
                                    del st.session_state.confirm_delete
                                    st.rerun()
                
                # Show editing form if member selected for editing
                if st.session_state.get('editing_member') == selected_member.id:
                    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ / Teammitglied bearbeiten")
                    
                    with st.form("edit_member_form"):
                        new_first_name = st.text_input("–ò–º—è / Vorname", value=selected_member.first_name)
                        new_last_name = st.text_input("–§–∞–º–∏–ª–∏—è / Nachname", value=selected_member.last_name)
                        new_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω / Telefon", value=selected_member.phone or "")
                        
                        # Team selection
                        current_team_key = None
                        if selected_member.team:
                            current_team_key = selected_member.team.name
                        
                        new_team_name = st.selectbox(
                            "–ë—Ä–∏–≥–∞–¥–∞ / Team:",
                            list(team_options.keys()),
                            index=list(team_options.keys()).index(current_team_key) if current_team_key in team_options else 0
                        )
                        
                        # Category selection
                        category_options = {
                            "–í–æ–¥–∏—Ç–µ–ª—å / Fahrer": WorkerCategory.driver,
                            "–ú–µ—Ö–∞–Ω–∏–∫ / Mechaniker": WorkerCategory.mechanic,
                            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç / Spezialist": WorkerCategory.specialist,
                            "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã / Allgemein": WorkerCategory.general
                        }
                        
                        current_category_key = {
                            WorkerCategory.driver: "–í–æ–¥–∏—Ç–µ–ª—å / Fahrer",
                            WorkerCategory.mechanic: "–ú–µ—Ö–∞–Ω–∏–∫ / Mechaniker",
                            WorkerCategory.specialist: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç / Spezialist",
                            WorkerCategory.general: "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã / Allgemein"
                        }.get(selected_member.category, "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã / Allgemein")
                        
                        new_category_display = st.selectbox(
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è / Kategorie:",
                            list(category_options.keys()),
                            index=list(category_options.keys()).index(current_category_key)
                        )
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å / Speichern"):
                                with Session() as session:
                                    member_to_update = session.get(TeamMember, selected_member.id)
                                    if member_to_update:
                                        member_to_update.first_name = new_first_name
                                        member_to_update.last_name = new_last_name
                                        member_to_update.phone = new_phone
                                        member_to_update.team_id = team_options[new_team_name].id
                                        member_to_update.category = category_options[new_category_display]
                                        
                                        session.commit()
                                        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã / √Ñnderungen gespeichert")
                                        del st.session_state.editing_member
                                        st.rerun()
                        
                        with col2:
                            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞ / Abbrechen"):
                                del st.session_state.editing_member
                                st.rerun()
        else:
            st.info("üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—Ä–∏–≥–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã / Keine Teammitglieder gefunden")

with tabs[1]:  # Add new
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—Ä–∏–≥–∞–¥—ã / Teammitglied hinzuf√ºgen")
    
    if not teams:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±—Ä–∏–≥–∞–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ë—Ä–∏–≥–∞–¥—ã'")
        st.warning("‚ö†Ô∏è Erstellen Sie zuerst Teams auf der 'Teams' Seite")
        st.stop()
    
    with st.form("add_member_form"):
        first_name = st.text_input("* –ò–º—è / Vorname")
        last_name = st.text_input("* –§–∞–º–∏–ª–∏—è / Nachname")
        phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω / Telefon")
        
        # Team selection
        team_name = st.selectbox(
            "* –ë—Ä–∏–≥–∞–¥–∞ / Team:",
            list(team_options.keys())
        )
        
        # Category selection
        category_options = {
            "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã / Allgemein": WorkerCategory.general,
            "–í–æ–¥–∏—Ç–µ–ª—å / Fahrer": WorkerCategory.driver,
            "–ú–µ—Ö–∞–Ω–∏–∫ / Mechaniker": WorkerCategory.mechanic,
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç / Spezialist": WorkerCategory.specialist
        }
        
        category_display = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è / Kategorie:",
            list(category_options.keys())
        )
        
        if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ / Teammitglied hinzuf√ºgen"):
            if first_name and last_name and team_name:
                with Session() as session:
                    new_member = TeamMember(
                        organization_id=user.organization_id,
                        team_id=team_options[team_name].id,
                        first_name=first_name,
                        last_name=last_name,
                        phone=phone,
                        category=category_options[category_display]
                    )
                    
                    session.add(new_member)
                    session.commit()
                    
                    st.success(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ '{first_name} {last_name}' –¥–æ–±–∞–≤–ª–µ–Ω")
                    st.success(f"‚úÖ Teammitglied '{first_name} {last_name}' hinzugef√ºgt")
                    st.rerun()
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (*)")
                st.error("‚ùå F√ºllen Sie die Pflichtfelder aus (*)")

with tabs[2]:  # Documents
    st.subheader("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ / Dokumente der Teammitglieder")
    
    with Session() as session:
        # Get all team members for document management
        team_members = session.query(TeamMember).filter_by(organization_id=user.organization_id).all()
        
        if team_members:
            # Select member
            member_options = {f"{m.first_name} {m.last_name} ({m.team.name if m.team else '–ë–µ–∑ –±—Ä–∏–≥–∞–¥—ã'})": m for m in team_members}
            selected_member_display = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ / Teammitglied ausw√§hlen:",
                list(member_options.keys())
            )
            
            if selected_member_display:
                selected_member = member_options[selected_member_display]
                
                # Show existing documents
                if selected_member.documents:
                    st.write(f"**üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã {selected_member.first_name} {selected_member.last_name}:**")
                    
                    for doc in selected_member.documents:
                        with st.expander(f"üìÑ {doc.title}"):
                            col1, col2 = st.columns([3, 1])
                            
                            with col1:
                                st.write(f"**–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:** {doc.upload_date.strftime('%d.%m.%Y %H:%M')}")
                                if doc.expiry_date:
                                    expiry_status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω" if doc.expiry_date < date.today() else "üü¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                                    st.write(f"**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** {doc.expiry_date.strftime('%d.%m.%Y')} {expiry_status}")
                                
                                # Display file
                                if doc.file_url:
                                    display_file(doc.file_url, doc.title)
                            
                            with col2:
                                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_doc_{doc.id}"):
                                    with Session() as session:
                                        doc_to_delete = session.get(TeamMemberDocument, doc.id)
                                        if doc_to_delete:
                                            session.delete(doc_to_delete)
                                            session.commit()
                                            st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                                            st.rerun()
                else:
                    st.info("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # Add new documents
                st.write("**‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã:**")
                
                with st.form(f"add_documents_{selected_member.id}"):
                    doc_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ / Dokumentname")
                    doc_files = st.file_uploader(
                        "–§–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ / Dokumentdateien",
                        accept_multiple_files=True,
                        type=['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx']
                    )
                    expiry_date = st.date_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) / Ablaufdatum (optional)", value=None)
                    
                    if st.form_submit_button("üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã / Dokumente hinzuf√ºgen"):
                        if doc_title and doc_files:
                            # Upload files
                            uploaded_paths = upload_multiple_files(doc_files, 'team_member_documents')
                            
                            if uploaded_paths:
                                with Session() as session:
                                    for file_path in uploaded_paths:
                                        new_doc = TeamMemberDocument(
                                            team_member_id=selected_member.id,
                                            title=doc_title,
                                            file_url=file_path,
                                            expiry_date=expiry_date
                                        )
                                        session.add(new_doc)
                                    
                                    session.commit()
                                    st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(uploaded_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                                    st.rerun()
                            else:
                                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
                        else:
                            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã")
        else:
            st.info("üìù –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–∏–≥–∞–¥—ã")