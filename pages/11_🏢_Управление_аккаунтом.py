import streamlit as st
import uuid
from datetime import datetime
from database import execute_query
from translations import get_text
from auth import require_auth, show_org_header, is_admin, can_delete_account, hash_password

# Page config
st.set_page_config(
    page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º",
    page_icon="üè¢", 
    layout="wide"
)

# Require authentication
require_auth()
show_org_header()

# Language from session state
language = st.session_state.get('language', 'ru')

def show_account_management():
    """Account management interface - only for account owners"""
    st.title("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º / Account Management")
    
    # Check if current user is owner
    if not is_admin():
        st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω / Access Denied")
        st.info("üí° –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return
    
    # Display organization info
    org_info = execute_query("""
        SELECT name, created_at, subscription_status 
        FROM organizations 
        WHERE id = :org_id
    """, {'org_id': st.session_state.get('organization_id')})
    
    if org_info:
        org = org_info[0]
        st.success(f"üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {org[0]}")
        st.info(f"üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {org[1].strftime('%d.%m.%Y')}")
        st.info(f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** {org[2]}")
    
    st.divider()
    
    # Tabs for different management functions
    tab1, tab2, tab3 = st.tabs([
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ / User Management",
        "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å / Security", 
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / Settings"
    ])
    
    with tab1:
        show_user_management_panel()
    
    with tab2:
        show_security_panel()
        
    with tab3:
        show_account_settings()

def show_user_management_panel():
    """Panel for managing users within the account"""
    st.subheader("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ / Account Users")
    
    # Get all users in organization
    users = execute_query("""
        SELECT 
            u.id, u.email, u.first_name, u.last_name, u.role, u.created_at,
            t.name as team_name
        FROM users u
        LEFT JOIN teams t ON u.team_id = t.id
        WHERE u.organization_id = :org_id
        ORDER BY u.created_at DESC
    """, {'org_id': st.session_state.get('organization_id')})
    
    if users:
        st.write(f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫–∫–∞—É–Ω—Ç–µ:** {len(users)}")
        
        # Display users table
        for user in users:
            with st.container():
                col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                
                with col1:
                    role_icons = {
                        'owner': 'üëë',
                        'admin': 'üîß', 
                        'manager': 'üíº',
                        'team_lead': 'üë®‚Äçüíº',
                        'worker': 'üë∑'
                    }
                    icon = role_icons.get(user[4], 'üë§')
                    st.write(f"{icon} **{user[2]} {user[3]}**")
                    st.write(f"üìß {user[1]}")
                
                with col2:
                    st.write(f"**–†–æ–ª—å:** {get_text(user[4], language)}")
                    if user[6]:  # team_name
                        st.write(f"**–ë—Ä–∏–≥–∞–¥–∞:** {user[6]}")
                
                with col3:
                    st.write(f"**–î–æ–±–∞–≤–ª–µ–Ω:** {user[5].strftime('%d.%m.%Y')}")
                
                with col4:
                    if user[4] != 'owner' and user[0] != st.session_state.get('user_id'):
                        if st.button("üóëÔ∏è", key=f"remove_user_{user[0]}", help="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"):
                            remove_user_from_account(user[0], f"{user[2]} {user[3]}")
                
                st.divider()
    else:
        st.info("–í –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # Add new user section
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç")
    show_add_user_to_account_form()

def show_add_user_to_account_form():
    """Form to add new user to account"""
    st.info("üîê **–í–∞–∂–Ω–æ:** –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã (–∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞)")
    
    with st.form("add_user_to_account"):
        col1, col2 = st.columns(2)
        
        with col1:
            email = st.text_input(
                "üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                placeholder="user@example.com",
                help="–≠—Ç–æ—Ç email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞"
            )
            password = st.text_input(
                "üîí –ü–∞—Ä–æ–ª—å",
                type="password",
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            )
            password_confirm = st.text_input(
                "üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                type="password"
            )
        
        with col2:
            first_name = st.text_input(
                "–ò–º—è",
                placeholder="–ò–≤–∞–Ω"
            )
            last_name = st.text_input(
                "–§–∞–º–∏–ª–∏—è", 
                placeholder="–ò–≤–∞–Ω–æ–≤"
            )
            phone = st.text_input(
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                placeholder="+7 900 123-45-67"
            )
        
        role = st.selectbox(
            "–†–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ",
            options=['admin', 'manager', 'team_lead', 'worker'],
            format_func=lambda x: get_text(x, language),
            help="–í—Å–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–∞–≤–∞, —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º"
        )
        
        # Team selection
        teams = execute_query("""
            SELECT id, name FROM teams 
            WHERE organization_id = :org_id 
            ORDER BY name
        """, {'org_id': st.session_state.get('organization_id')})
        
        team_id = None
        if teams:
            team_id = st.selectbox(
                "–ë—Ä–∏–≥–∞–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                options=[None] + [t[0] for t in teams],
                format_func=lambda x: "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" if x is None else next((t[1] for t in teams if t[0] == x), x)
            )
        
        if st.form_submit_button("üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç", type="primary"):
            if not all([email, password, first_name, last_name]):
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            elif len(password) < 6:
                st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            elif password != password_confirm:
                st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                add_user_to_account(email, password, first_name, last_name, phone, role, team_id)

def add_user_to_account(email, password, first_name, last_name, phone, role, team_id):
    """Add new user to the account"""
    try:
        # Check if email already exists
        existing = execute_query("SELECT id FROM users WHERE email = :email", {'email': email})
        if existing:
            st.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        user_id = str(uuid.uuid4())
        password_hash = hash_password(password)
        
        execute_query("""
            INSERT INTO users (id, organization_id, email, password_hash, first_name, last_name, phone, role, team_id, created_at)
            VALUES (:id, :organization_id, :email, :password_hash, :first_name, :last_name, :phone, :role, :team_id, :created_at)
        """, {
            'id': user_id,
            'organization_id': st.session_state.get('organization_id'),
            'email': email,
            'password_hash': password_hash,
            'first_name': first_name,
            'last_name': last_name,
            'phone': phone,
            'role': role,
            'team_id': team_id,
            'created_at': datetime.now()
        })
        
        st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        st.info(f"üìß Email –¥–ª—è –≤—Ö–æ–¥–∞: {email}")
        st.balloons()
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

def remove_user_from_account(user_id, user_name):
    """Remove user from account"""
    try:
        execute_query("""
            DELETE FROM users 
            WHERE id = :id AND organization_id = :org_id AND role != 'owner'
        """, {
            'id': user_id,
            'org_id': st.session_state.get('organization_id')
        })
        
        st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

def show_security_panel():
    """Security settings panel"""
    st.subheader("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ / Account Security")
    
    # Change password
    st.write("**–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞**")
    with st.form("change_password"):
        current_password = st.text_input("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å", type="password")
        new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password", help="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        
        if st.form_submit_button("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
            if not all([current_password, new_password, confirm_password]):
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            elif len(new_password) < 6:
                st.error("‚ùå –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            elif new_password != confirm_password:
                st.error("‚ùå –ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                change_owner_password(current_password, new_password)

def change_owner_password(current_password, new_password):
    """Change owner password"""
    try:
        # Verify current password
        current_hash = hash_password(current_password)
        user_check = execute_query("""
            SELECT id FROM users 
            WHERE id = :user_id AND password_hash = :current_hash
        """, {
            'user_id': st.session_state.get('user_id'),
            'current_hash': current_hash
        })
        
        if not user_check:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
            return
        
        # Update password
        new_hash = hash_password(new_password)
        execute_query("""
            UPDATE users 
            SET password_hash = :new_hash 
            WHERE id = :user_id
        """, {
            'new_hash': new_hash,
            'user_id': st.session_state.get('user_id')
        })
        
        st.success("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {str(e)}")

def show_account_settings():
    """Account settings panel"""
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ / Account Settings")
    
    # Get current organization data
    org_data = execute_query("""
        SELECT name, telegram_chat_id 
        FROM organizations 
        WHERE id = :org_id
    """, {'org_id': st.session_state.get('organization_id')})
    
    if org_data:
        org = org_data[0]
        
        # Organization name
        st.write("**–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏**")
        with st.form("update_org_name"):
            new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=org[0])
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"):
                if new_name and new_name != org[0]:
                    try:
                        execute_query("""
                            UPDATE organizations 
                            SET name = :name 
                            WHERE id = :id
                        """, {
                            'name': new_name,
                            'id': st.session_state.get('organization_id')
                        })
                        st.session_state.organization_name = new_name
                        st.success("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        
        st.divider()
        
        # Danger zone - only for owners
        if can_delete_account():
            st.subheader("‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ / Danger Zone")
            st.warning("**–í–ù–ò–ú–ê–ù–ò–ï:** –î–µ–π—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!")
            
            with st.expander("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞", expanded=False):
            st.error("**–í–ù–ò–ú–ê–ù–ò–ï:** –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:")
            st.write("‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
            st.write("‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π") 
            st.write("‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –±—Ä–∏–≥–∞–¥, —à—Ç—Ä–∞—Ñ–æ–≤, —Ä–∞—Å—Ö–æ–¥–æ–≤")
            st.write("‚Ä¢ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            confirm_text = st.text_input(
                '–í–≤–µ–¥–∏—Ç–µ "–£–î–ê–õ–ò–¢–¨" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                help="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
            )
            
                if st.button("üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢ –ù–ê–í–°–ï–ì–î–ê", type="secondary"):
                    if confirm_text == "–£–î–ê–õ–ò–¢–¨":
                        delete_account_permanently()
                    else:
                        st.error('‚ùå –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "–£–î–ê–õ–ò–¢–¨"')
        else:
            st.info("üí° –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")

def delete_account_permanently():
    """Permanently delete the entire account"""
    try:
        org_id = st.session_state.get('organization_id')
        
        # Delete all organization data in correct order (respecting foreign keys)
        tables = [
            'user_documents', 'vehicle_documents', 'rental_contracts',
            'material_assignments', 'material_history', 
            'penalties', 'maintenances', 'car_expenses', 
            'vehicle_assignments', 'users', 'materials',
            'vehicles', 'teams', 'organizations'
        ]
        
        for table in tables:
            execute_query(f"DELETE FROM {table} WHERE organization_id = :org_id", {'org_id': org_id})
        
        # Clear session
        for key in ['authenticated', 'user_id', 'organization_id', 'user_role', 'organization_name']:
            if key in st.session_state:
                del st.session_state[key]
        
        st.success("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        st.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")

# Main execution
if __name__ == "__main__":
    show_account_management()