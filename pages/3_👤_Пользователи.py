import streamlit as st
import uuid
from database import execute_query
from translations import get_text
from datetime import date, datetime
import hashlib
from utils import upload_file
from auth import require_auth, show_org_header, is_admin, can_manage_users, is_owner

# Page config
st.set_page_config(
    page_title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    page_icon="üë§",
    layout="wide"
)

# Require authentication
require_auth()
show_org_header()

# Language from session state
language = st.session_state.get('language', 'ru')

def show_users_list():
    """Show list of users with inline editing"""
    try:
        # Check if we're editing a user
        edit_user_id = st.session_state.get('edit_user_id', None)
        
        if edit_user_id:
            show_edit_user_form(edit_user_id)
            return
        
        users = execute_query("""
            SELECT 
                u.id,
                u.first_name,
                u.last_name,
                u.role,
                u.phone,
                t.name as team_name
            FROM users u
            LEFT JOIN teams t ON u.team_id = t.id
            ORDER BY u.first_name, u.last_name
        """)
        
        if users:            
            for user in users:
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                    
                    with col1:
                        st.write(f"**{user[1]} {user[2]}**")
                        if user[4]:  # phone
                            st.write(f"üìû {user[4]}")
                        if user[5]:  # team_name
                            st.write(f"üë• {user[5]}")
                    
                    with col2:
                        role_icons = {
                            'owner': 'üëë',
                            'admin': 'üîß',
                            'manager': 'üíº',
                            'team_lead': 'üë®‚Äçüíº',
                            'worker': 'üë∑'
                        }
                        icon = role_icons.get(user[3], 'üë§')
                        st.write(f"{icon} {get_text(user[3], language)}")
                    
                    with col3:
                        # Count user documents
                        doc_count = execute_query("""
                            SELECT COUNT(*) FROM user_documents 
                            WHERE user_id = :user_id AND is_active = true
                        """, {'user_id': user[0]})
                        count = doc_count[0][0] if doc_count else 0
                        st.write(f"üìÑ {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    
                    with col4:
                        col_edit, col_delete = st.columns(2)
                        with col_edit:
                            if st.button("‚úèÔ∏è", key=f"edit_user_{user[0]}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                                st.session_state.edit_user_id = user[0]
                                st.rerun()
                        with col_delete:
                            if st.button("üóëÔ∏è", key=f"delete_user_{user[0]}", help="–£–¥–∞–ª–∏—Ç—å"):
                                delete_user(user[0])
                    
                    st.divider()
        else:
            st.info(get_text('no_data', language))
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

def show_edit_user_form(user_id):
    """Show form to edit existing user"""
    try:
        # Get current user data
        user_data = execute_query("""
            SELECT first_name, last_name, phone, role, team_id 
            FROM users 
            WHERE id = :id
        """, {'id': user_id})
        
        if not user_data:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
                del st.session_state.edit_user_id
                st.rerun()
            return
        
        current_user = user_data[0]
        
        st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Benutzer bearbeiten")
        
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É / Zur√ºck zur Liste"):
            del st.session_state.edit_user_id
            st.rerun()
        
        with st.form("edit_user"):
            col1, col2 = st.columns(2)
            
            with col1:
                first_name = st.text_input(
                    "–ò–º—è / Vorname",
                    value=current_user[0],
                    placeholder="–ò–≤–∞–Ω"
                )
                last_name = st.text_input(
                    "–§–∞–º–∏–ª–∏—è / Nachname", 
                    value=current_user[1],
                    placeholder="–ò–≤–∞–Ω–æ–≤"
                )
                phone = st.text_input(
                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω / Telefon",
                    value=current_user[2] or "",
                    placeholder="+7 900 123-45-67"
                )
            
            with col2:
                roles = ['owner', 'admin', 'manager', 'team_lead', 'worker']
                current_role_index = roles.index(current_user[3]) if current_user[3] in roles else 0
                
                # Role selection - owners can edit any role, others can't change roles of owners
                available_roles = roles.copy()
                if not is_owner() and current_user[3] == 'owner':
                    # Non-owners can't edit owner accounts
                    st.error("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
                    available_roles = [current_user[3]]  # Keep current role only
                elif not is_owner():
                    # Non-owners can't assign owner role
                    available_roles = ['admin', 'manager', 'team_lead', 'worker']
                
                role = st.selectbox(
                    "–†–æ–ª—å / Rolle",
                    options=available_roles,
                    index=available_roles.index(current_user[3]) if current_user[3] in available_roles else 0,
                    format_func=lambda x: get_text(x, language)
                )
                
                # Get teams for assignment
                teams = execute_query("SELECT id, name FROM teams ORDER BY name")
                team_options = [None] + ([t[0] for t in teams] if teams else [])
                current_team_index = 0
                if current_user[4] and teams:
                    try:
                        current_team_index = team_options.index(current_user[4])
                    except ValueError:
                        current_team_index = 0
                
                team_id = st.selectbox(
                    "–ë—Ä–∏–≥–∞–¥–∞ / Team",
                    options=team_options,
                    index=current_team_index,
                    format_func=lambda x: "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" if x is None else next((t[1] for t in teams if teams and t[0] == x), str(x))
                )
            
            col_save, col_cancel = st.columns(2)
            with col_save:
                if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å / Speichern", type="primary"):
                    if first_name and last_name:
                        try:
                            execute_query("""
                                UPDATE users 
                                SET first_name = :first_name, last_name = :last_name, phone = :phone, role = :role, team_id = :team_id
                                WHERE id = :id
                            """, {
                                'id': user_id,
                                'first_name': first_name,
                                'last_name': last_name,
                                'phone': phone,
                                'role': role,
                                'team_id': team_id
                            })
                            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω / Benutzer aktualisiert")
                            del st.session_state.edit_user_id
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
                    else:
                        st.error("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
            with col_cancel:
                if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞ / Abbrechen"):
                    del st.session_state.edit_user_id
                    st.rerun()
                    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
            if 'edit_user_id' in st.session_state:
                del st.session_state.edit_user_id
            st.rerun()

def show_add_user_form():
    """Show form to add new user - only for account owners"""
    # Check if current user has permission to add users
    if not can_manage_users():
        st.error("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        st.info("üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç / Benutzer zum Konto hinzuf√ºgen")
    st.info("üîê –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    
    with st.form("add_user"):
        col1, col2 = st.columns(2)
        
        with col1:
            email = st.text_input(
                "üìß Email",
                placeholder="user@example.com",
                help="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
            )
            password = st.text_input(
                "üîí –ü–∞—Ä–æ–ª—å / Password",
                type="password",
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
                help="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞"
            )
            password_confirm = st.text_input(
                "üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å / Password best√§tigen",
                type="password",
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            )
        
        with col2:
            first_name = st.text_input(
                "–ò–º—è / Vorname",
                placeholder="–ò–≤–∞–Ω"
            )
            last_name = st.text_input(
                "–§–∞–º–∏–ª–∏—è / Nachname",
                placeholder="–ò–≤–∞–Ω–æ–≤"
            )
            phone = st.text_input(
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω / Telefon",
                placeholder="+7 900 123-45-67"
            )
        
        # Role selection (no owner role for added users)
        role = st.selectbox(
            "–†–æ–ª—å / Rolle",
            options=['admin', 'manager', 'team_lead', 'worker'],
            format_func=lambda x: get_text(x, language),
            help="–í—Å–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
        )
        
        # Get teams for assignment
        teams = execute_query("SELECT id, name FROM teams ORDER BY name")
        team_id = None
        if teams:
            team_id = st.selectbox(
                "–ë—Ä–∏–≥–∞–¥–∞ / Team",
                options=[None] + [t[0] for t in teams],
                format_func=lambda x: "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" if x is None else next((t[1] for t in teams if t[0] == x), x)
            )
        
        if st.form_submit_button("üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç / Zum Konto hinzuf√ºgen"):
            if not all([email, password, first_name, last_name]):
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: Email, –ø–∞—Ä–æ–ª—å, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è")
            elif len(password) < 6:
                st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            elif password != password_confirm:
                st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                try:
                    # Check if email already exists
                    existing = execute_query("SELECT id FROM users WHERE email = :email", {'email': email})
                    if existing:
                        st.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return
                    
                    user_id = str(uuid.uuid4())
                    password_hash = hashlib.sha256((password + "fleet_management_salt_2025").encode()).hexdigest()
                    
                    execute_query("""
                        INSERT INTO users (id, organization_id, email, password_hash, first_name, last_name, phone, role, team_id, created_at)
                        VALUES (:id, :organization_id, :email, :password_hash, :first_name, :last_name, :phone, :role, :team_id, :created_at)
                    """, {
                        'id': user_id,
                        'organization_id': st.session_state.get('organization_id'),
                        'email': email,
                        'password_hash': password_hash,
                        'first_name': first_name,
                        'last_name': last_name,
                        'phone': phone,
                        'role': role,
                        'team_id': team_id,
                        'created_at': datetime.now()
                    })
                    st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç!")
                    st.info(f"üìß Email –¥–ª—è –≤—Ö–æ–¥–∞: {email}")
                    st.info("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

def delete_user(user_id):
    """Delete user - with permission checks"""
    try:
        # Check if current user has permission to delete users
        if not can_manage_users():
            st.error("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # Check if trying to delete another owner
        user_to_delete = execute_query("SELECT role FROM users WHERE id = :id", {'id': user_id})
        if user_to_delete and user_to_delete[0][0] == 'owner':
            st.error("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return
        
        # Check if trying to delete self  
        if user_id == st.session_state.get('user_id'):
            st.error("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
            
        execute_query("DELETE FROM users WHERE id = :id AND organization_id = :org_id", {
            'id': user_id,
            'org_id': st.session_state.get('organization_id')
        })
        st.success("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

@st.cache_data(ttl=300)
def get_user_documents_cached():
    """Get user documents with caching"""
    return execute_query("""
        SELECT 
            ud.id,
            u.first_name || ' ' || u.last_name as user_name,
            ud.document_type,
            ud.title,
            ud.date_issued,
            ud.date_expiry,
            ud.file_url
        FROM user_documents ud
        JOIN users u ON ud.user_id = u.id
        WHERE ud.is_active = true
        ORDER BY ud.date_expiry ASC, u.first_name
    """)

def show_user_documents_list():
    """Show list of user documents"""
    try:
        # Check if any document is being viewed
        view_doc_id = None
        for key in st.session_state:
            if key.startswith("view_doc_") and st.session_state[key]:
                view_doc_id = key.replace("view_doc_", "")
                break
        
        if view_doc_id:
            # Get document info
            doc_info = execute_query("SELECT title, file_url FROM user_documents WHERE id = :id", {'id': view_doc_id})
            if doc_info:
                show_user_file_viewer(doc_info[0][1], doc_info[0][0], view_doc_id)
                return
        
        # User selection filter
        st.subheader("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Benutzer ausw√§hlen")
        
        col1, col2 = st.columns([2, 1])
        with col1:
            users = execute_query("SELECT id, first_name || ' ' || last_name as full_name FROM users ORDER BY first_name")
            if not users:
                st.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π / Keine Benutzer")
                return
                
            selected_user_id = st.selectbox(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / Benutzer",
                options=[u[0] for u in users],
                format_func=lambda x: next((u[1] for u in users if u[0] == x), x),
                key="user_docs_filter"
            )
        
        with col2:
            st.write("")  # Spacing
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å / Aktualisieren"):
                get_user_documents_cached.clear()
                st.rerun()
        
        if selected_user_id:
            user_name = next((u[1] for u in users if u[0] == selected_user_id), "")
            st.markdown(f"### üìã –î–æ–∫—É–º–µ–Ω—Ç—ã: **{user_name}**")
            
            # Get documents for selected user
            user_documents = execute_query("""
                SELECT 
                    ud.id,
                    ud.document_type,
                    ud.title,
                    ud.issue_date,
                    ud.expiry_date,
                    ud.file_url
                FROM user_documents ud
                WHERE ud.user_id = :user_id AND ud.is_active = true
                ORDER BY ud.document_type, ud.expiry_date ASC
            """, {'user_id': selected_user_id})
            
            if user_documents:
                # Group documents by type
                doc_types = {
                    'passport': {'name': '–ü–∞—Å–ø–æ—Ä—Ç / Reisepass', 'icon': 'üÜî', 'docs': []},
                    'driving_license': {'name': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ / F√ºhrerschein', 'icon': 'üöó', 'docs': []},
                    'medical_certificate': {'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ / √Ñrztliches Zeugnis', 'icon': 'üè•', 'docs': []},
                    'work_permit': {'name': '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É / Arbeitserlaubnis', 'icon': 'üíº', 'docs': []},
                    'visa': {'name': '–í–∏–∑–∞ / Visum', 'icon': '‚úàÔ∏è', 'docs': []},
                    'insurance': {'name': '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ / Versicherung', 'icon': 'üõ°Ô∏è', 'docs': []},
                }
                
                # Group documents
                for doc in user_documents:
                    doc_type = doc[1]
                    if doc_type not in doc_types:
                        doc_types[doc_type] = {'name': doc_type, 'icon': 'üìÑ', 'docs': []}
                    doc_types[doc_type]['docs'].append(doc)
                
                # Show documents by type
                for doc_type, type_info in doc_types.items():
                    if type_info['docs']:
                        st.markdown(f"#### {type_info['icon']} {type_info['name']}")
                        
                        for doc in type_info['docs']:
                            with st.container():
                                col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                                
                                with col1:
                                    st.write(f"üìÑ **{doc[2]}**")
                                
                                with col2:
                                    if doc[3]:
                                        st.write(f"üìÖ –í—ã–¥–∞–Ω: {doc[3].strftime('%d.%m.%Y')}")
                                
                                with col3:
                                    if doc[4]:
                                        days_left = (doc[4] - datetime.now().date()).days
                                        if days_left <= 0:
                                            st.error(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω")
                                        elif days_left <= 30:
                                            st.warning(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π")
                                        else:
                                            st.success(f"‚úÖ –î–æ {doc[4].strftime('%d.%m.%Y')}")
                                    else:
                                        st.info("–°—Ä–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω")
                                
                                with col4:
                                    col_view, col_del = st.columns(2)
                                    with col_view:
                                        if doc[5] and st.button("üëÅÔ∏è", key=f"view_doc_{doc[0]}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä"):
                                            st.session_state[f"view_doc_{doc[0]}"] = True
                                            st.rerun()
                                    with col_del:
                                        if st.button("üóëÔ∏è", key=f"delete_doc_{doc[0]}", help="–£–¥–∞–ª–∏—Ç—å"):
                                            delete_user_document(doc[0])
                                
                                st.divider()
                        
                        st.write("")  # Spacing between document types
            else:
                st.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ / {user_name} hat keine Dokumente")
                st.markdown("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–î–æ–±–∞–≤–∏—Ç—å' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

def show_user_file_viewer(file_url, title, doc_id):
    """Show file viewer in full width"""
    st.header(f"üìé {title}")
    
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É / Zur√ºck zur Liste", use_container_width=True):
        if f"view_doc_{doc_id}" in st.session_state:
            del st.session_state[f"view_doc_{doc_id}"]
        st.rerun()
    
    if not file_url:
        st.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω / Datei nicht gefunden")
        return
    
    # File info
    file_name = file_url.split('/')[-1]
    file_extension = file_name.split('.')[-1].lower() if '.' in file_name else ''
    
    # Create main layout
    col_main, col_sidebar = st.columns([3, 1])
    
    with col_main:
        st.info(f"üìÅ **–§–∞–π–ª:** {file_name}")
        
        # Determine file type and display accordingly
        if file_extension in ['jpg', 'jpeg', 'png', 'gif']:
            try:
                import os
                if file_url.startswith('/'):
                    file_path = file_url.lstrip('/')
                    if os.path.exists(file_path):
                        st.image(file_path, caption=title, use_container_width=True)
                    else:
                        st.error("üö´ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω/Bilddatei nicht gefunden")
                else:
                    st.image(file_url, caption=title, use_container_width=True)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/Fehler beim Laden des Bildes: {str(e)}")
                
        elif file_extension == 'pdf':
            st.success("üìÑ **PDF –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É**")
            
            col_pdf1, col_pdf2 = st.columns(2)
            with col_pdf1:
                st.write("üí° **–†—É—Å—Å–∫–∏–π:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å' —Å–ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF —Ñ–∞–π–ª–∞")
            with col_pdf2:
                st.write("üí° **Deutsch:** Nutzen Sie den 'Download'-Button rechts, um die PDF anzuzeigen")
                
        else:
            st.warning(f"üìé **–§–∞–π–ª —Ç–∏–ø–∞ .{file_extension}**")
            st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∞ / Nutzen Sie den Download-Button rechts")
    
    with col_sidebar:
        st.markdown("### –î–µ–π—Å—Ç–≤–∏—è / Aktionen")
        
        try:
            import os
            if file_url.startswith('/'):
                # Local file
                file_path = file_url.lstrip('/')
                if os.path.exists(file_path):
                    with open(file_path, "rb") as f:
                        file_data = f.read()
                    
                    st.download_button(
                        label="‚¨áÔ∏è **–°–∫–∞—á–∞—Ç—å**\n**Download**",
                        data=file_data,
                        file_name=file_name,
                        use_container_width=True
                    )
                else:
                    st.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                st.markdown(f"üîó [–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª/Datei herunterladen]({file_url})")
        except Exception as e:
            st.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")

def show_add_user_document_form():
    """Show form to add user document"""
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç / Dokument hinzuf√ºgen")
    
    # Get saved user selection from the list tab if available
    saved_user_id = st.session_state.get("user_docs_filter", None)
    
    with st.form("add_user_document"):
        col1, col2 = st.columns(2)
        
        with col1:
            # User selection
            users = execute_query("SELECT id, first_name || ' ' || last_name as full_name FROM users ORDER BY first_name")
            if not users:
                st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π / Benutzer m√ºssen erstellt werden")
                return
            
            # Set default to the selected user from list tab
            default_index = 0
            if saved_user_id:
                try:
                    default_index = [u[0] for u in users].index(saved_user_id)
                except ValueError:
                    default_index = 0
                
            user_id = st.selectbox(
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / Benutzer",
                options=[u[0] for u in users],
                format_func=lambda x: next((u[1] for u in users if u[0] == x), x),
                index=default_index
            )
            
            document_type = st.selectbox(
                "üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ / Dokumenttyp",
                options=['passport', 'driving_license', 'medical_certificate', 'work_permit', 'visa', 'insurance'],
                format_func=lambda x: {
                    'passport': 'üÜî –ü–∞—Å–ø–æ—Ä—Ç / Reisepass',
                    'driving_license': 'üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ / F√ºhrerschein', 
                    'medical_certificate': 'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ / √Ñrztliches Zeugnis',
                    'work_permit': 'üíº –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É / Arbeitserlaubnis',
                    'visa': '‚úàÔ∏è –í–∏–∑–∞ / Visum',
                    'insurance': 'üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ / Versicherung'
                }[x]
            )
            
            title = st.text_input(
                "üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ / Dokumententitel",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B"
            )
        
        with col2:
            date_issued = st.date_input(
                "üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ / Ausstellungsdatum",
                value=None
            )
            
            date_expiry = st.date_input(
                "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ / G√ºltig bis",
                value=None
            )
            
            uploaded_file = st.file_uploader(
                "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª / Datei anh√§ngen",
                type=['jpg', 'jpeg', 'png', 'pdf']
            )
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç / Dokument speichern", type="primary"):
            if user_id and document_type and title:
                try:
                    file_url = None
                    if uploaded_file:
                        file_url = upload_file(uploaded_file, 'user_documents')
                    
                    doc_id = str(uuid.uuid4())
                    execute_query("""
                        INSERT INTO user_documents 
                        (id, organization_id, user_id, document_type, title, issue_date, expiry_date, file_url, notes)
                        VALUES (:id, :organization_id, :user_id, :document_type, :title, :issue_date, :expiry_date, :file_url, :notes)
                    """, {
                        'id': doc_id,
                        'user_id': user_id,
                        'document_type': document_type,
                        'title': title,
                        'organization_id': st.session_state.get('organization_id'),
                        'issue_date': date_issued,
                        'expiry_date': date_expiry,
                        'notes': None,
                        'file_url': file_url
                    })
                    
                    user_name = next((u[1] for u in users if u[0] == user_id), "")
                    st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {user_name}")
                    st.info("üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
                    
                    get_user_documents_cached.clear()
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ù–∞–∑–≤–∞–Ω–∏–µ")

def delete_user_document(doc_id):
    """Delete user document"""
    try:
        execute_query("UPDATE user_documents SET is_active = false WHERE id = :id", {'id': doc_id})
        st.success("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        get_user_documents_cached.clear()
        st.rerun()
    except Exception as e:
        st.error(f"Error: {str(e)}")

def show_user_documents():
    """Show user documents management"""
    st.subheader("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π / Benutzerdokumente")
    
    # Sub-tabs for documents
    doc_tab1, doc_tab2 = st.tabs([
        "–°–ø–∏—Å–æ–∫ / Liste",
        "–î–æ–±–∞–≤–∏—Ç—å / Hinzuf√ºgen"
    ])
    
    with doc_tab1:
        show_user_documents_list()
    
    with doc_tab2:
        show_add_user_document_form()

# Main page - simplified structure
st.title(f"üë§ {get_text('users', language)}")

tab1, tab2, tab3 = st.tabs([
    "–°–ø–∏—Å–æ–∫ / Liste",
    "–î–æ–±–∞–≤–∏—Ç—å / Hinzuf√ºgen",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã / Dokumente"
])

with tab1:
    show_users_list()

with tab2:
    show_add_user_form()

with tab3:
    show_user_documents()