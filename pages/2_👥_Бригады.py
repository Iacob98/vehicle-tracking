import streamlit as st
import uuid
import pandas as pd
from database import execute_query, SessionLocal
from translations import get_text
from utils import export_to_csv
from datetime import datetime, date
from auth import require_auth, show_org_header
from models import TeamMember, Team, WorkerCategory, TeamMemberDocument

# Page config
st.set_page_config(
    page_title="–ë—Ä–∏–≥–∞–¥—ã",
    page_icon="üë•",
    layout="wide"
)

# Require authentication
require_auth()
show_org_header()

# Language from session state
language = st.session_state.get('language', 'ru')
user_org_id = st.session_state.get('organization_id')

def show_teams_list():
    """Show list of teams with inline editing"""
    try:
        # Check if we're editing a team
        edit_team_id = st.session_state.get('edit_team_id', None)
        
        if edit_team_id:
            show_edit_team_form(edit_team_id)
            return
        
        teams = execute_query(f"""
            SELECT 
                t.id,
                t.name,
                CONCAT(u.first_name, ' ', u.last_name) as leader_name,
                t.lead_id,
                COUNT(DISTINCT usr.id) as users_count,
                COUNT(DISTINCT va.vehicle_id) as vehicles_count,
                COUNT(DISTINCT tm.id) as team_members_count
            FROM teams t
            LEFT JOIN users u ON t.lead_id = u.id
            LEFT JOIN users usr ON t.id = usr.team_id
            LEFT JOIN vehicle_assignments va ON t.id = va.team_id 
                AND (va.end_date IS NULL OR va.end_date > CURRENT_DATE)
            LEFT JOIN team_members tm ON t.id = tm.team_id
            WHERE t.organization_id = '{user_org_id}'
            GROUP BY t.id, t.name, u.first_name, u.last_name, t.lead_id
            ORDER BY t.name
        """)
        
        if teams:
            for team in teams:
                with st.container():
                    col1, col2, col3, col4, col5 = st.columns([3, 1.5, 1.5, 1.5, 1])
                    
                    with col1:
                        st.write(f"**{team[1]}**")
                        if team[2]:
                            st.write(f"üë§ –õ–∏–¥–µ—Ä: {team[2]}")
                        else:
                            st.write("üë§ –õ–∏–¥–µ—Ä: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
                    
                    with col2:
                        st.write(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {team[4]}")
                    
                    with col3:
                        st.write(f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {team[5]}")
                    
                    with col4:
                        st.write(f"üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team[6]}")
                    
                    with col5:
                        col_edit, col_delete = st.columns(2)
                        with col_edit:
                            if st.button("‚úèÔ∏è", key=f"edit_team_{team[0]}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                                st.session_state.edit_team_id = team[0]
                                st.rerun()
                        with col_delete:
                            if st.button("üóëÔ∏è", key=f"delete_team_{team[0]}", help="–£–¥–∞–ª–∏—Ç—å"):
                                delete_team(team[0])
                    
                    st.divider()
        else:
            st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def show_add_team_form():
    """Show form to add new team"""
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –±—Ä–∏–≥–∞–¥—É")
    
    with st.form("add_team_form"):
        team_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã*", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        
        # Get available users for team lead
        users = execute_query(f"""
            SELECT id, CONCAT(first_name, ' ', last_name) as full_name, role
            FROM users 
            WHERE organization_id = '{user_org_id}'
            ORDER BY first_name
        """)
        
        lead_options = {"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω": None}
        if users:
            for user in users:
                lead_options[f"{user[1]} ({user[2]})"] = user[0]
        
        selected_lead = st.selectbox("–õ–∏–¥–µ—Ä –±—Ä–∏–≥–∞–¥—ã", list(lead_options.keys()))
        
        if st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –±—Ä–∏–≥–∞–¥—É"):
            if not team_name:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã")
            else:
                try:
                    team_id = str(uuid.uuid4())
                    execute_query("""
                        INSERT INTO teams (id, organization_id, name, lead_id, created_at)
                        VALUES (:id, :org_id, :name, :lead_id, :created_at)
                    """, {
                        'id': team_id,
                        'org_id': user_org_id,
                        'name': team_name,
                        'lead_id': lead_options[selected_lead],
                        'created_at': datetime.now()
                    })
                    st.success(f"‚úÖ –ë—Ä–∏–≥–∞–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã: {str(e)}")

def show_team_members():
    """Show team members management"""
    st.subheader("üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—Ä–∏–≥–∞–¥")
    
    # –í—ã–±–æ—Ä –±—Ä–∏–≥–∞–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with SessionLocal() as session:
        teams = session.query(Team).filter_by(organization_id=user_org_id).all()
        
        if not teams:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—Ä–∏–≥–∞–¥—É")
            return
        
        team_options = {"–í—Å–µ –±—Ä–∏–≥–∞–¥—ã": None}
        for team in teams:
            team_options[team.name] = team.id
        
        selected_team_filter = st.selectbox("üîç –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–∏–≥–∞–¥–µ:", list(team_options.keys()))
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        query = session.query(TeamMember).filter_by(organization_id=user_org_id)
        if selected_team_filter != "–í—Å–µ –±—Ä–∏–≥–∞–¥—ã":
            query = query.filter_by(team_id=team_options[selected_team_filter])
        
        members = query.all()
        
        if members:
            member_data = []
            for member in members:
                team_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                if member.team_id:
                    team = session.query(Team).filter_by(id=member.team_id).first()
                    team_name = team.name if team else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                
                member_data.append({
                    '–ò–º—è': f"{member.first_name} {member.last_name}",
                    '–¢–µ–ª–µ—Ñ–æ–Ω': member.phone or "–ù–µ —É–∫–∞–∑–∞–Ω",
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': member.category.value if member.category else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    '–ë—Ä–∏–≥–∞–¥–∞': team_name,
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': member.created_at.strftime('%d.%m.%Y') if member.created_at else ""
                })
            
            df = pd.DataFrame(member_data)
            st.dataframe(df, use_container_width=True)
            
            st.write(f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(members)}")
        else:
            st.info("üìù –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç")

def show_add_team_member():
    """Show form to add team member"""
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    
    with SessionLocal() as session:
        teams = session.query(Team).filter_by(organization_id=user_org_id).all()
        
        team_options = {"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞": None}
        for team in teams:
            team_options[team.name] = team.id
        
        with st.form("add_team_member_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                member_first_name = st.text_input("–ò–º—è*", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
                member_last_name = st.text_input("–§–∞–º–∏–ª–∏—è*", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
                member_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", placeholder="+7 xxx xxx xx xx")
            
            with col2:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
                category_options = [
                    "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    "driver", 
                    "mechanic", 
                    "helper", 
                    "supervisor"
                ]
                selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", category_options)
                
                selected_team = st.selectbox("–ë—Ä–∏–≥–∞–¥–∞", list(team_options.keys()))
            
            if st.form_submit_button("üíæ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"):
                if not member_first_name or not member_last_name:
                    st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                else:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        new_member = TeamMember(
                            first_name=member_first_name,
                            last_name=member_last_name,
                            phone=member_phone if member_phone else None,
                            category=WorkerCategory(selected_category) if selected_category != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" else None,
                            team_id=team_options[selected_team],
                            organization_id=user_org_id
                        )
                        
                        session.add(new_member)
                        session.commit()
                        
                        st.success(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member_first_name} {member_last_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                        st.rerun()
                        
                    except Exception as e:
                        session.rollback()
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}")

def show_team_management():
    """Show team member management - assign/reassign members to teams"""
    st.subheader("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–º –±—Ä–∏–≥–∞–¥")
    
    with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = session.query(TeamMember).filter_by(organization_id=user_org_id).all()
        teams = session.query(Team).filter_by(organization_id=user_org_id).all()
        
        if not members:
            st.info("üìù –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –±—Ä–∏–≥–∞–¥–∞–º")
            return
            
        if not teams:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –±—Ä–∏–≥–∞–¥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        st.write("### –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±—Ä–∏–≥–∞–¥–∞–º
        team_dict = {team.id: team.name for team in teams}
        team_dict[None] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        for team in teams:
            team_members = [m for m in members if m.team_id == team.id]
            with st.expander(f"üè¢ {team.name} ({len(team_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)", expanded=False):
                if team_members:
                    for member in team_members:
                        col1, col2, col3 = st.columns([3, 2, 1])
                        with col1:
                            st.write(f"üë§ {member.first_name} {member.last_name}")
                        with col2:
                            st.write(f"üìû {member.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                        with col3:
                            if st.button("üîÑ", key=f"reassign_{member.id}", help="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å"):
                                st.session_state[f"reassign_member_{member.id}"] = True
                                st.rerun()
                else:
                    st.write("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –±—Ä–∏–≥–∞–¥–µ")
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –±—Ä–∏–≥–∞–¥—ã
        unassigned_members = [m for m in members if m.team_id is None]
        if unassigned_members:
            with st.expander(f"‚ùì –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã ({len(unassigned_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)", expanded=True):
                for member in unassigned_members:
                    col1, col2, col3 = st.columns([3, 2, 1])
                    with col1:
                        st.write(f"üë§ {member.first_name} {member.last_name}")
                    with col2:
                        st.write(f"üìû {member.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    with col3:
                        if st.button("‚ûï", key=f"assign_{member.id}", help="–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤ –±—Ä–∏–≥–∞–¥—É"):
                            st.session_state[f"reassign_member_{member.id}"] = True
                            st.rerun()
        
        st.write("---")
        
        # –§–æ—Ä–º–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for member in members:
            if st.session_state.get(f"reassign_member_{member.id}", False):
                st.write(f"### –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {member.first_name} {member.last_name}")
                
                current_team = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                if member.team_id:
                    current_team = team_dict.get(member.team_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—Ä–∏–≥–∞–¥–∞")
                
                st.write(f"**–¢–µ–∫—É—â–∞—è –±—Ä–∏–≥–∞–¥–∞:** {current_team}")
                
                with st.form(f"reassign_form_{member.id}"):
                    team_options = {"–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å": None}
                    for team in teams:
                        team_options[team.name] = team.id
                    
                    new_team = st.selectbox("–ù–æ–≤–∞—è –±—Ä–∏–≥–∞–¥–∞:", list(team_options.keys()))
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.form_submit_button("‚úÖ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å"):
                            try:
                                member.team_id = team_options[new_team]
                                session.commit()
                                
                                new_team_name = new_team if new_team != "–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å" else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                                st.success(f"‚úÖ {member.first_name} {member.last_name} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –≤ '{new_team_name}'")
                                
                                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                if f"reassign_member_{member.id}" in st.session_state:
                                    del st.session_state[f"reassign_member_{member.id}"]
                                st.rerun()
                                
                            except Exception as e:
                                session.rollback()
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if f"reassign_member_{member.id}" in st.session_state:
                                del st.session_state[f"reassign_member_{member.id}"]
                            st.rerun()
                
                break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ä–º—É –∑–∞ —Ä–∞–∑

def delete_team(team_id):
    """Delete team"""
    try:
        execute_query("DELETE FROM teams WHERE id = :id", {'id': team_id})
        st.success("–ë—Ä–∏–≥–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞")
        st.rerun()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

def show_edit_team_form(team_id):
    """Show edit team form"""
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∏–≥–∞–¥—É")
    
    team = execute_query("SELECT name, lead_id FROM teams WHERE id = :id", {'id': team_id})
    if not team:
        st.error("–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    current_name, current_lead_id = team[0]
    
    with st.form(f"edit_team_form_{team_id}"):
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã", value=current_name)
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            try:
                execute_query("""
                    UPDATE teams 
                    SET name = :name 
                    WHERE id = :id
                """, {'name': new_name, 'id': team_id})
                st.success("–ë—Ä–∏–≥–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                st.session_state.edit_team_id = None
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
            st.session_state.edit_team_id = None
            st.rerun()

def show_team_member_documents():
    """Show team member documents management"""
    st.subheader("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # Check if viewing a document
    view_doc_id = None
    for key in st.session_state:
        if key.startswith("view_tm_doc_") and st.session_state[key]:
            view_doc_id = key.replace("view_tm_doc_", "")
            break
    
    with SessionLocal() as session:
        # If viewing a document, show viewer
        if view_doc_id:
            doc = session.query(TeamMemberDocument).filter_by(id=view_doc_id).first()
            if doc:
                member = session.query(TeamMember).filter_by(id=doc.team_member_id).first()
                member_name = f"{member.first_name} {member.last_name}" if member else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                st.header(f"üìé {doc.title}")
                st.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {member_name}")
                
                if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", use_container_width=True):
                    if f"view_tm_doc_{view_doc_id}" in st.session_state:
                        del st.session_state[f"view_tm_doc_{view_doc_id}"]
                    st.rerun()
                
                if doc.file_url:
                    # Display the document
                    file_name = doc.file_url.split('/')[-1]
                    file_extension = file_name.split('.')[-1].lower() if '.' in file_name else ''
                    
                    col_main, col_sidebar = st.columns([3, 1])
                    
                    with col_main:
                        st.info(f"üìÅ **–§–∞–π–ª:** {file_name}")
                        
                        if file_extension in ['jpg', 'jpeg', 'png', 'gif']:
                            try:
                                import os
                                if doc.file_url.startswith('/'):
                                    file_path = doc.file_url.lstrip('/')
                                    if os.path.exists(file_path):
                                        st.image(file_path, caption=doc.title, use_container_width=True)
                                    else:
                                        st.error("üö´ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                else:
                                    st.image(doc.file_url, caption=doc.title, use_container_width=True)
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                        elif file_extension == 'pdf':
                            st.success("üìÑ **PDF –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É**")
                            st.write("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å' —Å–ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF —Ñ–∞–π–ª–∞")
                        else:
                            st.warning(f"üìé **–§–∞–π–ª —Ç–∏–ø–∞ .{file_extension}**")
                            st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∞")
                    
                    with col_sidebar:
                        st.markdown("### –î–µ–π—Å—Ç–≤–∏—è")
                        
                        try:
                            import os
                            if doc.file_url.startswith('/'):
                                file_path = doc.file_url.lstrip('/')
                                if os.path.exists(file_path):
                                    with open(file_path, "rb") as f:
                                        file_data = f.read()
                                    
                                    st.download_button(
                                        label="‚¨áÔ∏è **–°–∫–∞—á–∞—Ç—å**",
                                        data=file_data,
                                        file_name=file_name,
                                        use_container_width=True
                                    )
                                else:
                                    st.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            else:
                                st.markdown(f"üîó [–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª]({doc.file_url})")
                        except Exception as e:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                        
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", use_container_width=True):
                            try:
                                session.delete(doc)
                                session.commit()
                                st.success("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                                if f"view_tm_doc_{view_doc_id}" in st.session_state:
                                    del st.session_state[f"view_tm_doc_{view_doc_id}"]
                                st.rerun()
                            except Exception as e:
                                session.rollback()
                                st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                else:
                    st.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # Normal document management view
        members = session.query(TeamMember).filter_by(organization_id=user_org_id).all()
        
        if not members:
            st.info("üìù –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
            return
        
        # Member selection
        member_options = {}
        for member in members:
            member_options[f"{member.first_name} {member.last_name}"] = member.id
        
        selected_member = st.selectbox("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", list(member_options.keys()))
        selected_member_id = member_options[selected_member]
        
        # Get documents for selected member  
        documents = session.query(TeamMemberDocument).filter_by(team_member_id=selected_member_id).all()
        
        # Check which documents are missing for this member
        existing_doc_titles = [doc.title for doc in documents]
        required_docs = ["–ü–∞—Å–ø–æ—Ä—Ç", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É", "–í–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞"]
        missing_docs = [doc for doc in required_docs if doc not in existing_doc_titles]
        
        if missing_docs:
            st.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(missing_docs)}")
        
        doc_tab1, doc_tab2 = st.tabs(["üìã –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"])
        
        with doc_tab1:
            if documents:
                for doc in documents:
                    with st.container():
                        col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 1, 1])
                        
                        with col1:
                            st.write(f"üìÑ **{doc.title}**")
                        
                        with col2:
                            if doc.upload_date:
                                st.write(f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.upload_date.strftime('%d.%m.%Y')}")
                        
                        with col3:
                            if doc.expiry_date:
                                days_left = (doc.expiry_date - date.today()).days
                                if days_left <= 0:
                                    st.error("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω")
                                elif days_left <= 30:
                                    st.warning(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π")
                                else:
                                    st.success(f"‚úÖ –î–æ {doc.expiry_date.strftime('%d.%m.%Y')}")
                            else:
                                st.info("–°—Ä–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω")
                        
                        with col4:
                            if st.button("üëÅÔ∏è", key=f"view_tm_doc_{doc.id}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä"):
                                if doc.file_url:
                                    st.session_state[f"view_tm_doc_{doc.id}"] = True
                                    st.rerun()
                        
                        with col5:
                            if st.button("üóëÔ∏è", key=f"del_tm_doc_{doc.id}", help="–£–¥–∞–ª–∏—Ç—å"):
                                try:
                                    session.delete(doc)
                                    session.commit()
                                    st.success("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                                    st.rerun()
                                except Exception as e:
                                    session.rollback()
                                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                        
                        st.divider()
            else:
                st.info(f"–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {selected_member} –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        with doc_tab2:
            st.write("### –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            
            # Document types for workers in Germany
            document_types = {
                "üÜî –ü–∞—Å–ø–æ—Ä—Ç / Reisepass": "–ü–∞—Å–ø–æ—Ä—Ç",
                "üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ / F√ºhrerschein": "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
                "üíº –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É / Arbeitserlaubnis": "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É",
                "üè† –í–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ / Aufenthaltstitel": "–í–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ / Krankenversicherung": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞",
                "üìç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ / Anmeldung": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
                "üí∞ –ù–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä / Steuer-ID": "–ù–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ / Sozialversicherungsausweis": "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ",
                "üìã –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä / Arbeitsvertrag": "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
                "üéì –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è / Qualifikation": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "üìù –î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç / Sonstiges": "–î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"
            }
            
            with st.form("add_team_member_document_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    # Dropdown for document type
                    selected_doc_type = st.selectbox(
                        "üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞* / Dokumenttyp*",
                        options=list(document_types.keys()),
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ / W√§hlen Sie den Dokumenttyp"
                    )
                    
                    # If "Other" is selected, show text input
                    if selected_doc_type == "üìù –î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç / Sonstiges":
                        custom_doc_title = st.text_input(
                            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞*",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ / Dokumentname eingeben"
                        )
                        doc_title = custom_doc_title if custom_doc_title else "–î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"
                    else:
                        doc_title = document_types[selected_doc_type]
                        st.info(f"üìÑ –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: **{doc_title}**")
                    
                    uploaded_file = st.file_uploader(
                        "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª / Datei ausw√§hlen",
                        type=['pdf', 'jpg', 'jpeg', 'png'],
                        help="–§–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG"
                    )
                
                with col2:
                    expiry_date = st.date_input(
                        "üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ / G√ºltig bis",
                        value=None,
                        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω / Leer lassen wenn unbegrenzt"
                    )
                    
                    # Show required documents info
                    st.markdown("#### ‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                    st.markdown("""
                    **–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏:**
                    - üÜî –ü–∞—Å–ø–æ—Ä—Ç
                    - üíº –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
                    - üè† –í–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ
                    - üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
                    
                    **–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:**
                    - üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                    """)
                
                if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç / Dokument speichern"):
                    if selected_doc_type == "üìù –î—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç / Sonstiges" and not custom_doc_title:
                        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ / Dokumentname erforderlich")
                    elif not uploaded_file:
                        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª / Datei erforderlich")
                    else:
                        try:
                            from utils import upload_file
                            
                            # Upload file
                            file_url = upload_file(uploaded_file, 'team_member_documents')
                            
                            # Create document record
                            new_doc = TeamMemberDocument(
                                team_member_id=selected_member_id,
                                title=doc_title,
                                file_url=file_url,
                                expiry_date=expiry_date,
                                upload_date=datetime.now()
                            )
                            
                            session.add(new_doc)
                            session.commit()
                            
                            st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{doc_title}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {selected_member}")
                            st.rerun()
                            
                        except Exception as e:
                            session.rollback()
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

# Main page
st.title("üë• –ë—Ä–∏–≥–∞–¥—ã")

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìã –°–ø–∏—Å–æ–∫ –±—Ä–∏–≥–∞–¥",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–∏–≥–∞–¥—É", 
    "üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–º",
    "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
])

with tab1:
    show_teams_list()

with tab2:
    show_add_team_form()

with tab3:
    show_team_members()

with tab4:
    show_add_team_member()

with tab5:
    show_team_management()

with tab6:
    show_team_member_documents()