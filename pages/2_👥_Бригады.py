import streamlit as st
import uuid
import pandas as pd
from database import execute_query, SessionLocal
from translations import get_text
from utils import export_to_csv
from datetime import datetime
from auth import require_auth, show_org_header
from models import TeamMember, Team, WorkerCategory

# Page config
st.set_page_config(
    page_title="–ë—Ä–∏–≥–∞–¥—ã",
    page_icon="üë•",
    layout="wide"
)

# Require authentication
require_auth()
show_org_header()

# Language from session state
language = st.session_state.get('language', 'ru')
user_org_id = st.session_state.get('organization_id')

def show_teams_list():
    """Show list of teams with inline editing"""
    try:
        # Check if we're editing a team
        edit_team_id = st.session_state.get('edit_team_id', None)
        
        if edit_team_id:
            show_edit_team_form(edit_team_id)
            return
        
        teams = execute_query(f"""
            SELECT 
                t.id,
                t.name,
                CONCAT(u.first_name, ' ', u.last_name) as leader_name,
                t.lead_id,
                COUNT(DISTINCT usr.id) as users_count,
                COUNT(DISTINCT va.vehicle_id) as vehicles_count,
                COUNT(DISTINCT tm.id) as team_members_count
            FROM teams t
            LEFT JOIN users u ON t.lead_id = u.id
            LEFT JOIN users usr ON t.id = usr.team_id
            LEFT JOIN vehicle_assignments va ON t.id = va.team_id 
                AND (va.end_date IS NULL OR va.end_date > CURRENT_DATE)
            LEFT JOIN team_members tm ON t.id = tm.team_id
            WHERE t.organization_id = '{user_org_id}'
            GROUP BY t.id, t.name, u.first_name, u.last_name, t.lead_id
            ORDER BY t.name
        """)
        
        if teams:
            for team in teams:
                with st.container():
                    col1, col2, col3, col4, col5 = st.columns([3, 1.5, 1.5, 1.5, 1])
                    
                    with col1:
                        st.write(f"**{team[1]}**")
                        if team[2]:
                            st.write(f"üë§ –õ–∏–¥–µ—Ä: {team[2]}")
                        else:
                            st.write("üë§ –õ–∏–¥–µ—Ä: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
                    
                    with col2:
                        st.write(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {team[4]}")
                    
                    with col3:
                        st.write(f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {team[5]}")
                    
                    with col4:
                        st.write(f"üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team[6]}")
                    
                    with col5:
                        col_edit, col_delete = st.columns(2)
                        with col_edit:
                            if st.button("‚úèÔ∏è", key=f"edit_team_{team[0]}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                                st.session_state.edit_team_id = team[0]
                                st.rerun()
                        with col_delete:
                            if st.button("üóëÔ∏è", key=f"delete_team_{team[0]}", help="–£–¥–∞–ª–∏—Ç—å"):
                                delete_team(team[0])
                    
                    st.divider()
        else:
            st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def show_add_team_form():
    """Show form to add new team"""
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –±—Ä–∏–≥–∞–¥—É")
    
    with st.form("add_team"):
        team_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã*", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        
        # Get available users for team lead
        users = execute_query(f"""
            SELECT id, CONCAT(first_name, ' ', last_name) as full_name, role
            FROM users 
            WHERE organization_id = '{user_org_id}'
            ORDER BY first_name
        """)
        
        lead_options = {"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω": None}
        if users:
            for user in users:
                lead_options[f"{user[1]} ({user[2]})"] = user[0]
        
        selected_lead = st.selectbox("–õ–∏–¥–µ—Ä –±—Ä–∏–≥–∞–¥—ã", list(lead_options.keys()))
        
        if st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –±—Ä–∏–≥–∞–¥—É"):
            if not team_name:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã")
            else:
                try:
                    team_id = str(uuid.uuid4())
                    execute_query("""
                        INSERT INTO teams (id, organization_id, name, lead_id, created_at)
                        VALUES (:id, :org_id, :name, :lead_id, :created_at)
                    """, {
                        'id': team_id,
                        'org_id': user_org_id,
                        'name': team_name,
                        'lead_id': lead_options[selected_lead],
                        'created_at': datetime.now()
                    })
                    st.success(f"‚úÖ –ë—Ä–∏–≥–∞–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã: {str(e)}")

def show_team_members():
    """Show team members management"""
    st.subheader("üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—Ä–∏–≥–∞–¥")
    
    # –í—ã–±–æ—Ä –±—Ä–∏–≥–∞–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with SessionLocal() as session:
        teams = session.query(Team).filter_by(organization_id=user_org_id).all()
        
        if not teams:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—Ä–∏–≥–∞–¥—É")
            return
        
        team_options = {"–í—Å–µ –±—Ä–∏–≥–∞–¥—ã": None}
        for team in teams:
            team_options[team.name] = team.id
        
        selected_team_filter = st.selectbox("üîç –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–∏–≥–∞–¥–µ:", list(team_options.keys()))
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        query = session.query(TeamMember).filter_by(organization_id=user_org_id)
        if selected_team_filter != "–í—Å–µ –±—Ä–∏–≥–∞–¥—ã":
            query = query.filter_by(team_id=team_options[selected_team_filter])
        
        members = query.all()
        
        if members:
            member_data = []
            for member in members:
                team_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                if member.team_id:
                    team = session.query(Team).filter_by(id=member.team_id).first()
                    team_name = team.name if team else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                
                member_data.append({
                    '–ò–º—è': f"{member.first_name} {member.last_name}",
                    '–¢–µ–ª–µ—Ñ–æ–Ω': member.phone or "–ù–µ —É–∫–∞–∑–∞–Ω",
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': member.category.value if member.category else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    '–ë—Ä–∏–≥–∞–¥–∞': team_name,
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': member.created_at.strftime('%d.%m.%Y') if member.created_at else ""
                })
            
            df = pd.DataFrame(member_data)
            st.dataframe(df, use_container_width=True)
            
            st.write(f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(members)}")
        else:
            st.info("üìù –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç")

def show_add_team_member():
    """Show form to add team member"""
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    
    with SessionLocal() as session:
        teams = session.query(Team).filter_by(organization_id=user_org_id).all()
        
        team_options = {"–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞": None}
        for team in teams:
            team_options[team.name] = team.id
        
        with st.form("add_team_member"):
            col1, col2 = st.columns(2)
            
            with col1:
                member_first_name = st.text_input("–ò–º—è*", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
                member_last_name = st.text_input("–§–∞–º–∏–ª–∏—è*", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
                member_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", placeholder="+7 xxx xxx xx xx")
            
            with col2:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
                category_options = [
                    "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    "driver", 
                    "mechanic", 
                    "helper", 
                    "supervisor"
                ]
                selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", category_options)
                
                selected_team = st.selectbox("–ë—Ä–∏–≥–∞–¥–∞", list(team_options.keys()))
            
            if st.form_submit_button("üíæ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"):
                if not member_first_name or not member_last_name:
                    st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                else:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        new_member = TeamMember(
                            first_name=member_first_name,
                            last_name=member_last_name,
                            phone=member_phone if member_phone else None,
                            category=WorkerCategory(selected_category) if selected_category != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" else None,
                            team_id=team_options[selected_team],
                            organization_id=user_org_id
                        )
                        
                        session.add(new_member)
                        session.commit()
                        
                        st.success(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member_first_name} {member_last_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                        st.rerun()
                        
                    except Exception as e:
                        session.rollback()
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}")

def delete_team(team_id):
    """Delete team"""
    try:
        execute_query("DELETE FROM teams WHERE id = :id", {'id': team_id})
        st.success("–ë—Ä–∏–≥–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞")
        st.rerun()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

def show_edit_team_form(team_id):
    """Show edit team form"""
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∏–≥–∞–¥—É")
    
    team = execute_query("SELECT name, lead_id FROM teams WHERE id = :id", {'id': team_id})
    if not team:
        st.error("–ë—Ä–∏–≥–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    current_name, current_lead_id = team[0]
    
    with st.form("edit_team"):
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã", value=current_name)
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            try:
                execute_query("""
                    UPDATE teams 
                    SET name = :name 
                    WHERE id = :id
                """, {'name': new_name, 'id': team_id})
                st.success("–ë—Ä–∏–≥–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                st.session_state.edit_team_id = None
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
            st.session_state.edit_team_id = None
            st.rerun()

# Main page
st.title("üë• –ë—Ä–∏–≥–∞–¥—ã")

tab1, tab2, tab3, tab4 = st.tabs([
    "üìã –°–ø–∏—Å–æ–∫ –±—Ä–∏–≥–∞–¥",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–∏–≥–∞–¥—É", 
    "üë∑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
])

with tab1:
    show_teams_list()

with tab2:
    show_add_team_form()

with tab3:
    show_team_members()

with tab4:
    show_add_team_member()