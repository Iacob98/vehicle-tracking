import streamlit as st
import uuid
from datetime import datetime, date
from database import execute_query
from translations import get_text
from utils import format_currency
import pandas as pd

# Page config
st.set_page_config(
    page_title="–í–æ–∑–≤—Ä–∞—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    page_icon="üîÑ",
    layout="wide"
)

# Language from session state
language = st.session_state.get('language', 'ru')

@st.cache_data(ttl=300)
def get_active_assignments():
    """Get active material assignments (equipment only)"""
    return execute_query("""
        SELECT 
            ma.id::text,
            m.name as material_name,
            m.type,
            m.unit,
            t.name as team_name,
            ma.quantity,
            ma.date as assigned_date,
            ma.status
        FROM material_assignments ma
        JOIN materials m ON ma.material_id = m.id
        JOIN teams t ON ma.team_id = t.id
        WHERE ma.status = 'active' AND m.type = 'equipment'
        ORDER BY ma.date DESC
    """)

@st.cache_data(ttl=300)  
def get_pending_returns():
    """Get equipment pending return confirmation"""
    return execute_query("""
        SELECT 
            ma.id::text,
            m.name as material_name,
            m.type,
            m.unit,
            t.name as team_name,
            ma.quantity,
            ma.date as assigned_date,
            ma.status
        FROM material_assignments ma
        JOIN materials m ON ma.material_id = m.id
        JOIN teams t ON ma.team_id = t.id
        WHERE ma.status = 'pending_return' AND m.type = 'equipment'
        ORDER BY ma.date DESC
    """)

@st.cache_data(ttl=300)
def get_return_history():
    """Get equipment return history"""
    return execute_query("""
        SELECT 
            ma.id::text,
            m.name as material_name,
            m.type,
            m.unit,
            t.name as team_name,
            ma.quantity,
            ma.date as assigned_date,
            ma.status,
            ma.notes
        FROM material_assignments ma
        JOIN materials m ON ma.material_id = m.id
        JOIN teams t ON ma.team_id = t.id
        WHERE ma.status IN ('returned', 'broken') AND m.type = 'equipment'
        ORDER BY ma.date DESC
        LIMIT 100
    """)

def mark_for_return(assignment_id):
    """Mark equipment for return (first step)"""
    try:
        # Get assignment details
        assignment_data = execute_query("""
            SELECT 
                ma.material_id::text,
                ma.team_id::text,
                ma.quantity,
                m.name,
                t.name as team_name
            FROM material_assignments ma
            JOIN materials m ON ma.material_id = m.id
            JOIN teams t ON ma.team_id = t.id
            WHERE ma.id = :assignment_id AND ma.status = 'active'
        """, {'assignment_id': assignment_id})
        
        if not assignment_data:
            st.error("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return False
            
        material_id, team_id, quantity, material_name, team_name = assignment_data[0]
        
        # Update assignment to pending_return status
        execute_query("""
            UPDATE material_assignments 
            SET status = 'pending_return', notes = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞'
            WHERE id = :assignment_id
        """, {'assignment_id': assignment_id})
        
        st.info(f"üîÑ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ '{material_name}' ({quantity} –µ–¥.) –æ—Ç–º–µ—á–µ–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –±—Ä–∏–≥–∞–¥—ã '{team_name}'")
        st.warning("‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
        
        # Clear caches
        get_active_assignments.clear()
        get_pending_returns.clear()
        
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
        return False

def confirm_return(assignment_id, return_status):
    """Confirm return of equipment (second step)"""
    try:
        # Get assignment details
        assignment_data = execute_query("""
            SELECT 
                ma.material_id::text,
                ma.team_id::text,
                ma.quantity,
                m.name,
                m.unit_price,
                t.name as team_name
            FROM material_assignments ma
            JOIN materials m ON ma.material_id = m.id
            JOIN teams t ON ma.team_id = t.id
            WHERE ma.id = :assignment_id AND ma.status = 'pending_return'
        """, {'assignment_id': assignment_id})
        
        if not assignment_data:
            st.error("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False
            
        material_id, team_id, quantity, material_name, unit_price, team_name = assignment_data[0]
        
        # Update assignment status to final status
        execute_query("""
            UPDATE material_assignments 
            SET status = :status, event = :event, notes = :notes
            WHERE id = :assignment_id
        """, {
            'assignment_id': assignment_id,
            'status': return_status,
            'event': return_status,
            'notes': f'–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {return_status}'
        })
        if return_status == 'returned':
            # Equipment returned in good condition - decrease assigned quantity
            execute_query("""
                UPDATE materials 
                SET assigned_quantity = COALESCE(assigned_quantity, 0) - :quantity 
                WHERE id = :material_id
            """, {'material_id': material_id, 'quantity': quantity})
            
            st.success(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ '{material_name}' ({quantity} –µ–¥.) —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ—Ç –±—Ä–∏–≥–∞–¥—ã '{team_name}'")
            
        elif return_status == 'broken':
            # Equipment returned broken - decrease assigned quantity and create penalty
            execute_query("""
                UPDATE materials 
                SET assigned_quantity = COALESCE(assigned_quantity, 0) - :quantity 
                WHERE id = :material_id
            """, {'material_id': material_id, 'quantity': quantity})
            
            # Create penalty for broken equipment
            penalty_id = str(uuid.uuid4())
            penalty_amount = float(unit_price or 0) * quantity
            penalty_description = f"–ü–æ–ª–æ–º–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {material_name} ({quantity} –µ–¥.)"
            
            execute_query("""
                INSERT INTO penalties 
                (id, organization_id, team_id, date, amount, status, description)
                VALUES (:id, :organization_id, :team_id, :date, :amount, 'open', :description)
            """, {
                'id': penalty_id,
                'organization_id': st.session_state.get('organization_id'),
                'team_id': team_id,
                'date': date.today(),
                'amount': penalty_amount,
                'description': penalty_description
            })
            
            st.error(f"üíî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–ª–æ–º–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è '{material_name}' ({quantity} –µ–¥.)")
            st.info(f"üí∞ –°–æ–∑–¥–∞–Ω —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É {format_currency(penalty_amount)} –¥–ª—è –±—Ä–∏–≥–∞–¥—ã '{team_name}'")
            
        # Clear caches
        get_active_assignments.clear()
        get_pending_returns.clear()
        get_return_history.clear()
        
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
        return False

def show_active_assignments():
    """Show active equipment assignments with mark for return buttons"""
    st.subheader("üìã –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ / Equipment in Use")
    
    assignments = get_active_assignments()
    
    if not assignments:
        st.info("–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ / No equipment currently in use")
        return
    
    # Display assignments
    for assignment in assignments:
        assignment_id, material_name, material_type, unit, team_name, quantity, assigned_date, status = assignment
        
        with st.container():
            col1, col2, col3 = st.columns([4, 2, 2])
            
            with col1:
                st.write(f"**üîß {material_name}**")
                st.write(f"üë• {team_name}")
            
            with col2:
                st.write(f"**{quantity} {unit}**")
                assigned_date_str = assigned_date.strftime('%d.%m.%Y') if assigned_date else ''
                st.write(f"üìÖ {assigned_date_str}")
            
            with col3:
                if st.button(f"üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫ –≤–æ–∑–≤—Ä–∞—Ç—É", key=f"mark_return_{assignment_id}", use_container_width=True):
                    if mark_for_return(assignment_id):
                        st.rerun()
            
            st.divider()

def show_pending_returns():
    """Show equipment pending return confirmation"""
    st.subheader("‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ / Pending Return Confirmation")
    
    pending = get_pending_returns()
    
    if not pending:
        st.info("–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / No equipment pending confirmation")
        return
    
    # Display pending returns
    for assignment in pending:
        assignment_id, material_name, material_type, unit, team_name, quantity, assigned_date, status = assignment
        
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                st.write(f"**üîß {material_name}**")
                st.write(f"üë• {team_name}")
                st.warning("‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            
            with col2:
                st.write(f"**{quantity} {unit}**")
                assigned_date_str = assigned_date.strftime('%d.%m.%Y') if assigned_date else ''
                st.write(f"üìÖ {assigned_date_str}")
            
            with col3:
                if st.button(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", key=f"confirm_return_{assignment_id}", use_container_width=True):
                    if confirm_return(assignment_id, 'returned'):
                        st.rerun()
            
            with col4:
                if st.button(f"üíî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª–æ–º–∫—É", key=f"confirm_broken_{assignment_id}", use_container_width=True):
                    if confirm_return(assignment_id, 'broken'):
                        st.rerun()
            
            st.divider()

def show_return_history():
    """Show equipment return history"""
    st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ / Return History")
    
    history = get_return_history()
    
    if not history:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø—É—Å—Ç–∞ / No return history")
        return
    
    # Create DataFrame for better display
    df_data = []
    for record in history:
        assignment_id, material_name, material_type, unit, team_name, quantity, assigned_date, status, notes = record
        
        status_emoji = "‚úÖ" if status == "returned" else "‚ùå"
        status_text = "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ" if status == "returned" else "–°–ª–æ–º–∞–Ω–æ"
        
        df_data.append({
            "–°—Ç–∞—Ç—É—Å": f"{status_emoji} {status_text}",
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": material_name,
            "–ë—Ä–∏–≥–∞–¥–∞": team_name,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": f"{quantity} {unit}",
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": assigned_date.strftime('%d.%m.%Y') if assigned_date else '',
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è": notes if notes else ''
        })
    
    if df_data:
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
    
    # Summary statistics
    st.divider()
    col1, col2, col3 = st.columns(3)
    
    total_returns = len(history)
    good_returns = len([h for h in history if h[7] == 'returned'])
    broken_returns = len([h for h in history if h[7] == 'broken'])
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤", total_returns)
    with col2:
        st.metric("–ò—Å–ø—Ä–∞–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", good_returns, delta=f"{good_returns/total_returns*100:.1f}%" if total_returns > 0 else "0%")
    with col3:
        st.metric("–°–ª–æ–º–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", broken_returns, delta=f"-{broken_returns/total_returns*100:.1f}%" if total_returns > 0 else "0%")

# Main page
st.title("üîÑ –í–æ–∑–≤—Ä–∞—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è / Equipment Return")

st.info("""
**üéØ –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è**

–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ:
- **üìã –í –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:** –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∫ –≤–æ–∑–≤—Ä–∞—Ç—É
- **‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–æ–º–∫—É  
- **üìú –ò—Å—Ç–æ—Ä–∏—è:** –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã

**–ü—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞:**
1. **–û—Ç–º–µ—Ç–∏—Ç—å –∫ –≤–æ–∑–≤—Ä–∞—Ç—É** - –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è
2. **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç** - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

**–í–∞–∂–Ω–æ:** –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–Ω–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏) –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
""")

# Tabs for different views
tab1, tab2, tab3 = st.tabs([
    "üìã –í –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏",
    "‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
    "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"
])

with tab1:
    show_active_assignments()

with tab2:
    show_pending_returns()

with tab3:
    show_return_history()