/**
 * Zod Schemas for Form Validation
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import { z } from 'zod';

// ============================================================================
// VEHICLE SCHEMAS
// ============================================================================

export const VEHICLE_STATUS_OPTIONS = [
  { value: 'active', label: '–ê–∫—Ç–∏–≤–µ–Ω / Aktiv' },
  { value: 'inactive', label: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω / Inaktiv' },
  { value: 'maintenance', label: '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ / In Wartung' },
  { value: 'repair', label: '–í —Ä–µ–º–æ–Ω—Ç–µ / In Reparatur' },
] as const;

export const vehicleSchema = z.object({
  name: z.string().min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  license_plate: z.string().min(1, '–ì–æ—Å. –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  vin: z.string().optional(),
  model: z.string().optional(),
  year: z.number().int().min(1900).max(2100).optional(),
  status: z.enum(['active', 'inactive', 'maintenance', 'repair']),
  is_rental: z.boolean(),
  rental_start_date: z.string().optional(),
  rental_end_date: z.string().optional(),
  rental_monthly_price: z.number().positive().optional(),
});

export type VehicleFormData = z.infer<typeof vehicleSchema>;

// ============================================================================
// PENALTY SCHEMAS
// ============================================================================

export const penaltySchema = z.object({
  vehicle_id: z.string().min(1, '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  user_id: z.string().optional().nullable(),
  amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
  date: z.string().min(1, '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  description: z.string().optional().nullable(),
  photo_url: z.string().optional().nullable(),
  status: z.enum(['open', 'paid', 'contested', 'cancelled']).default('open'),
});

export type PenaltyFormData = z.infer<typeof penaltySchema>;

// ============================================================================
// EXPENSE SCHEMAS
// ============================================================================

export const EXPENSE_TYPE_OPTIONS = [
  { value: 'vehicle', label: '–†–∞—Å—Ö–æ–¥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å' },
  { value: 'team', label: '–†–∞—Å—Ö–æ–¥ –Ω–∞ –±—Ä–∏–≥–∞–¥—É' },
  { value: 'general', label: '–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥' },
] as const;

export const expenseSchema = z.object({
  type: z.enum(['vehicle', 'team', 'general']),
  vehicle_id: z.string().optional(),
  team_id: z.string().optional(),
  amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
  date: z.string().min(1, '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  description: z.string().optional().nullable(),
});

export type ExpenseFormData = z.infer<typeof expenseSchema>;

// ============================================================================
// CAR EXPENSE SCHEMAS
// ============================================================================

export const CAR_EXPENSE_CATEGORY_OPTIONS = [
  { value: 'fuel', label: '‚õΩ –¢–æ–ø–ª–∏–≤–æ / Kraftstoff' },
  { value: 'maintenance', label: 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ / Wartung' },
  { value: 'repair', label: 'üõ†Ô∏è –†–µ–º–æ–Ω—Ç / Reparatur' },
  { value: 'insurance', label: 'üìÑ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ / Versicherung' },
  { value: 'tax', label: 'üí∞ –ù–∞–ª–æ–≥ / Steuer' },
  { value: 'parking', label: 'üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞ / Parkplatz' },
  { value: 'toll', label: 'üõ£Ô∏è –î–æ—Ä–æ–∂–Ω—ã–π —Å–±–æ—Ä / Maut' },
  { value: 'wash', label: 'üßº –ú–æ–π–∫–∞ / Autow√§sche' },
  { value: 'other', label: 'üì¶ –î—Ä—É–≥–æ–µ / Sonstiges' },
] as const;

export const carExpenseSchema = z.object({
  vehicle_id: z.string().min(1, '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  category: z.enum(['fuel', 'maintenance', 'repair', 'insurance', 'tax', 'parking', 'toll', 'wash', 'other']),
  amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
  date: z.string().min(1, '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  description: z.string().optional().nullable(),
  mileage: z.number().int().positive().optional().nullable(),
  maintenance_id: z.string().optional().nullable(),
  receipt_url: z.string().optional().nullable(),
});

export type CarExpenseFormData = z.infer<typeof carExpenseSchema>;

// ============================================================================
// MAINTENANCE SCHEMAS
// ============================================================================

export const MAINTENANCE_TYPE_OPTIONS = [
  { value: 'scheduled', label: '–ü–ª–∞–Ω–æ–≤–æ–µ / Geplant' },
  { value: 'repair', label: '–†–µ–º–æ–Ω—Ç / Reparatur' },
  { value: 'inspection', label: '–û—Å–º–æ—Ç—Ä / Inspektion' },
] as const;

export const maintenanceSchema = z.object({
  vehicle_id: z.string().min(1, '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  type: z.enum(['scheduled', 'repair', 'inspection']),
  description: z.string().min(1, '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  scheduled_date: z.string().min(1, '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  completed_date: z.string().optional().nullable(),
  cost: z.number().positive().optional().nullable(),
  notes: z.string().optional().nullable(),
});

export type MaintenanceFormData = z.infer<typeof maintenanceSchema>;

// ============================================================================
// TEAM SCHEMAS
// ============================================================================

export const teamSchema = z.object({
  name: z.string().min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  description: z.string().optional().nullable(),
});

export type TeamFormData = z.infer<typeof teamSchema>;

// ============================================================================
// USER SCHEMAS
// ============================================================================

export const createUserSchema = z.object({
  email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  first_name: z.string().min(1, '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  last_name: z.string().min(1, '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  role: z.enum(['admin', 'manager', 'user']).default('user'),
  phone: z.string().optional().nullable(),
});

export type CreateUserFormData = z.infer<typeof createUserSchema>;
