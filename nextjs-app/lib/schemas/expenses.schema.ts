import { z } from 'zod';

/**
 * Expense Schema - Form Validation
 *
 * Matches database constraints from migration 007:
 * - amount: positive (> 0)
 * - date: required
 * - type: required (vehicle or team)
 * - vehicle_id: required when type = 'vehicle'
 * - team_id: required when type = 'team'
 */

// Expense type enum
export const expenseTypeSchema = z.enum(['vehicle', 'team'], {
  errorMap: () => ({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞' }),
});

// Main expense schema
export const expenseSchema = z
  .object({
    type: expenseTypeSchema,

    vehicle_id: z
      .string()
      .uuid('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
      .nullable()
      .optional(),

    team_id: z
      .string()
      .uuid('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±—Ä–∏–≥–∞–¥—ã')
      .nullable()
      .optional(),

    date: z
      .string({ required_error: '–î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' })
      .regex(/^\d{4}-\d{2}-\d{2}$/, '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
      .refine(
        (dateStr) => {
          const date = new Date(dateStr);
          const today = new Date();
          today.setHours(23, 59, 59, 999);
          return date <= today;
        },
        { message: '–î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º' }
      ),

    amount: z
      .number({
        required_error: '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        invalid_type_error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º',
      })
      .positive('–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
      .max(999999.99, '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 999,999.99‚Ç¨)'),

    description: z
      .string()
      .max(1000, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)')
      .nullable()
      .optional(),
  })
  .refine(
    (data) => {
      // If type is 'vehicle', vehicle_id is required
      if (data.type === 'vehicle') {
        return !!data.vehicle_id;
      }
      return true;
    },
    {
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
      path: ['vehicle_id'],
    }
  )
  .refine(
    (data) => {
      // If type is 'team', team_id is required
      if (data.type === 'team') {
        return !!data.team_id;
      }
      return true;
    },
    {
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∏–≥–∞–¥—É –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –±—Ä–∏–≥–∞–¥—É',
      path: ['team_id'],
    }
  );

// Type inference
export type ExpenseFormData = z.infer<typeof expenseSchema>;

// Schema for expense creation
export const createExpenseSchema = expenseSchema;

// Schema for expense update
export const updateExpenseSchema = expenseSchema.partial().required({ type: true, date: true, amount: true });

// Export type options
export const EXPENSE_TYPE_OPTIONS = [
  { value: 'vehicle', label: 'üöó –ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å / Fahrzeug' },
  { value: 'team', label: 'üë• –ù–∞ –±—Ä–∏–≥–∞–¥—É / Team' },
] as const;
