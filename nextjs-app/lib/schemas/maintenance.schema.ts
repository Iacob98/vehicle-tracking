import { z } from 'zod';

/**
 * Maintenance Schema - Form Validation
 *
 * Matches database requirements:
 * - date: required
 * - vehicle_id: required (FK)
 * - type: required
 */

// Maintenance type enum (matches database maintenance_type enum)
export const maintenanceTypeSchema = z.enum([
  'inspection',
  'repair',
]);

// Main maintenance schema
export const maintenanceSchema = z.object({
  vehicle_id: z
    .string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
    .uuid('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è'),

  date: z
    .string().min(1, '–î–∞—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    .regex(/^\d{4}-\d{2}-\d{2}$/, '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'),

  type: maintenanceTypeSchema,

  description: z
    .string()
    .max(1000, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)')
    .nullable()
    .optional(),
});

// Type inference
export type MaintenanceFormData = z.infer<typeof maintenanceSchema>;

// Schema for maintenance creation
export const createMaintenanceSchema = maintenanceSchema;

// Schema for maintenance update
export const updateMaintenanceSchema = maintenanceSchema.partial().required({ vehicle_id: true, date: true, type: true });

// Export type options (matches database maintenance_type enum)
export const MAINTENANCE_TYPE_OPTIONS = [
  { value: 'inspection', label: 'üîç –¢–µ—Ö–æ—Å–º–æ—Ç—Ä / T√úV' },
  { value: 'repair', label: 'üîß –†–µ–º–æ–Ω—Ç / Reparatur' },
] as const;
