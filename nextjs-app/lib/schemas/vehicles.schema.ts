import { z } from 'zod';

/**
 * Vehicle Schema - Form Validation
 *
 * Matches database constraints from migration 007:
 * - name: NOT NULL, not empty
 * - license_plate: NOT NULL, not empty, unique per org
 * - vin: unique when provided, not empty
 * - year: 1900 to current_year + 1
 * - rental_monthly_price: positive when provided
 * - rental_dates: logical (end >= start when both present)
 */

// Vehicle status enum (matches database enum)
export const vehicleStatusSchema = z.enum(['active', 'repair', 'unavailable', 'rented'], {
  errorMap: () => ({ message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è' }),
});

// Main vehicle schema
export const vehicleSchema = z
  .object({
    name: z
      .string({ required_error: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' })
      .min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      .max(255, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)'),

    license_plate: z
      .string({ required_error: '–ì–æ—Å–Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
      .min(1, '–ì–æ—Å–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      .max(50, '–ì–æ—Å–Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π')
      .regex(/^[A-Z0-9\s-]+$/i, '–ì–æ—Å–Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã')
      .transform((val) => val.trim().toUpperCase()),

    vin: z
      .string()
      .max(17, 'VIN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 17 —Å–∏–º–≤–æ–ª–æ–≤')
      .regex(/^[A-HJ-NPR-Z0-9]*$/i, 'VIN —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (I, O, Q –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)')
      .transform((val) => val.trim().toUpperCase())
      .optional()
      .or(z.literal('')),

    model: z
      .string()
      .max(255, '–ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
      .optional()
      .or(z.literal('')),

    year: z
      .number({
        invalid_type_error: '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º',
      })
      .int('–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
      .min(1900, '–ì–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 1900')
      .max(new Date().getFullYear() + 1, `–ì–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ ${new Date().getFullYear() + 1}`)
      .nullable()
      .optional(),

    status: vehicleStatusSchema.default('active'),

    // Photo URL (stored as semicolon-separated string)
    photo_url: z
      .string()
      .url('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
      .nullable()
      .optional(),

    // Rental fields
    is_rental: z.boolean().default(false),

    rental_start_date: z
      .string()
      .regex(/^\d{4}-\d{2}-\d{2}$/, '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
      .nullable()
      .optional(),

    rental_end_date: z
      .string()
      .regex(/^\d{4}-\d{2}-\d{2}$/, '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
      .nullable()
      .optional(),

    rental_monthly_price: z
      .number({
        invalid_type_error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º',
      })
      .positive('–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
      .max(999999.99, '–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è')
      .nullable()
      .optional(),
  })
  .refine(
    (data) => {
      // If is_rental is false, rental fields should be null/empty
      if (!data.is_rental) {
        return true; // No validation needed
      }
      // If is_rental is true, at least rental_start_date should be present
      return !!data.rental_start_date;
    },
    {
      message: '–î–ª—è –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã',
      path: ['rental_start_date'],
    }
  )
  .refine(
    (data) => {
      // Rental dates logical check: end_date >= start_date
      if (!data.rental_start_date || !data.rental_end_date) {
        return true; // Skip if either is missing
      }
      return new Date(data.rental_end_date) >= new Date(data.rental_start_date);
    },
    {
      message: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞',
      path: ['rental_end_date'],
    }
  );

// Type inference
export type VehicleFormData = z.infer<typeof vehicleSchema>;

// Schema for vehicle creation (without ID)
export const createVehicleSchema = vehicleSchema;

// Schema for vehicle update (all fields optional except ID)
export const updateVehicleSchema = vehicleSchema.partial().required({ name: true, license_plate: true, status: true });

// Export status options for Select components
export const VEHICLE_STATUS_OPTIONS = [
  { value: 'active', label: 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' },
  { value: 'repair', label: 'üîß –†–µ–º–æ–Ω—Ç' },
  { value: 'unavailable', label: 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' },
  { value: 'rented', label: 'üè¢ –ê—Ä–µ–Ω–¥–∞' },
] as const;
