import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import * as path from 'path'

// Load environment variables
dotenv.config({ path: path.join(__dirname, '../.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing environment variables!')
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úì' : '‚úó')
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úì' : '‚úó')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

// Organization ID –¥–ª—è –∞–¥–º–∏–Ω–∞
const ORGANIZATION_ID = '550e8400-e29b-41d4-a716-446655440000'

async function createDriver() {
  console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è...\n')

  try {
    const driverEmail = 'vod@gmail.com'
    const driverPassword = 'Admin12345'

    // 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth...')
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: driverEmail,
      password: driverPassword,
      email_confirm: true,
      user_metadata: {
        organization_id: ORGANIZATION_ID,
        role: 'driver',
        first_name: '–í–æ–¥–∏—Ç–µ–ª—å',
        last_name: '–¢–µ—Å—Ç–æ–≤—ã–π'
      }
    })

    if (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth:', authError)
      return
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Auth:', authUser.user?.id)

    // 2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users...')
    const { data: dbUser, error: dbUserError } = await supabase
      .from('users')
      .insert({
        id: authUser.user!.id,
        organization_id: ORGANIZATION_ID,
        email: driverEmail,
        password_hash: 'managed_by_supabase_auth',
        first_name: '–í–æ–¥–∏—Ç–µ–ª—å',
        last_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
        role: 'driver'
      })
      .select()

    if (dbUserError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ users:', dbUserError)
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ users —Å–æ–∑–¥–∞–Ω–∞')
    }

    console.log('\n‚ú® –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n')
    console.log('üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log(`   Email: ${driverEmail}`)
    console.log(`   Password: ${driverPassword}`)
    console.log(`   Role: driver`)
    console.log(`\nüåê –í–æ–π—Ç–∏: http://localhost:3000/login`)

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

createDriver()
